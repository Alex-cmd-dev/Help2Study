"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fpnlu$@fn#^=g2to3e_#i91nt&clpo0#9#$k!ct7ur_325iz_x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"] #allows any host

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "api",
    "rest_framework",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": 'django.db.backends.sqlite3',
        "NAME": BASE_DIR / "db.sqlite3",

    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWS_CREDENTIALS = True

# ============================================
# LOGGING CONFIGURATION FOR PRESENTATION MODE
# ============================================
# Tracks the complete request journey through the system
# Great for demos and understanding data flow!
#
# HOW TO USE:
# - Run: python manage.py runserver
# - Logs appear in terminal with ðŸ”µ markers
# - Upload a file and watch the complete journey!
#
# WHAT THIS CONFIGURATION DOES:
# 1. FORMATTERS: Define how log messages look
#    - 'verbose': Shows timestamp, level, module name
#    - 'simple': Just level and message
#    - 'journey': Special format with ðŸ”µ emoji for request tracking
#
# 2. HANDLERS: Define where logs go
#    - 'console': Prints to terminal (stdout)
#    - 'journey_console': Special handler for request journey logs
#
# 3. LOGGERS: Configure specific logging channels
#    - 'api': Your custom app logs (request journey)
#    - 'django.request': Django's built-in request logs
#    - 'django.db.backends': Database query logs
#
# CUSTOMIZATION IDEAS FOR FUTURE:
# - Add 'file' handler to save logs to a file
# - Add 'email' handler to send error alerts
# - Add 'syslog' handler for centralized logging
# - Set 'django.db.backends' to DEBUG to see SQL queries
# - Add performance timing to track slow operations
#
# PRODUCTION TIP:
# In production, you'd send logs to services like:
# - AWS CloudWatch
# - DataDog
# - Sentry
# - Loggly
# Instead of just printing to console
# ============================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep Django's default loggers

    # FORMATTERS: Define how log messages are formatted
    'formatters': {
        'verbose': {
            'format': '{levelname} | {asctime} | {module} | {message}',
            'style': '{',  # Use {variable} style (not % or $)
        },
        'simple': {
            'format': '{levelname} | {message}',
            'style': '{',
        },
        'journey': {
            '()': 'django.utils.log.ServerFormatter',
            'format': 'ðŸ”µ {message}',  # ðŸ”µ emoji makes logs easy to spot!
            'style': '{',
        },
    },

    # HANDLERS: Define where logs go (console, file, email, etc.)
    'handlers': {
        'console': {
            'level': 'INFO',  # Only log INFO and above (INFO, WARNING, ERROR, CRITICAL)
            'class': 'logging.StreamHandler',  # Print to stdout
            'formatter': 'verbose',
        },
        'journey_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'journey',  # Use the ðŸ”µ emoji format
        },
    },

    # LOGGERS: Configure specific logging channels
    'loggers': {
        # Your custom app logger - tracks request journey
        # Usage in code: logger = logging.getLogger('api')
        'api': {
            'handlers': ['journey_console'],  # Use the journey formatter
            'level': 'INFO',
            'propagate': False,  # Don't pass logs to parent loggers
        },

        # Django's built-in request logger
        # Logs HTTP requests automatically
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },

        # Database query logger
        # Set level to 'DEBUG' to see all SQL queries Django generates
        # Great for learning how the ORM works!
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING',  # Change to DEBUG to see SQL queries
            'propagate': False,
        },
    },

    # Root logger - catches all other logs
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
